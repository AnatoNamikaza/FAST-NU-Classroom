Task_1:
-------

Possible solutions:
	Lengths		|	T_Price
----------------------------------------
1, 1, 1, 1, 1, 1	=	6
1, 2, 1, 1, 1		=	9
1, 3, 1, 1		=	11
1, 4, 1			=	11
1, 5			=	11
2, 1, 1, 1, 1		=	9
2, 2, 1, 1		=	12
2, 3, 1			=	14
2, 4			=	14
3, 1, 1, 1		=	11
3, 2, 1			=	14
3, 3			=	16
4, 1, 1			=	11
4, 2			=	14
5, 1			=	11
6			=	17

_________________________________________________________

Task_2:
-------

Declare void Function rev_generator with parameters rev_generator(int* r, int* p, int n, int& ind)

	Check if (n == ind)
		begin
			return;
		end
	Declare int j = 1
	
	Do while loop with condition
		begin
			r[ind] = Max ( r[ind] , p[j] + r[ind - j] ) // returns max value from r[ind] and p[j] + r[ind - j]
			increment j by one.
		end
	It runs till j <= ind is violated

	Calling Function Revenue Generator: rev_generator(r, p, n, ind++);

End of Function rev_generator

===========================

Declare void Function Max_Rev with parameters Max_Rev(int* r, int* p, int n)

	Check if (n == 0)
		begin
			return;
		end
	else check if (n == 1)
		begin
			r[1] = p[1];
		end
	else check if (n > 1)
		begin
			declare int i = 1; 
			Calling Function Revenue Generator: rev_generator(r, p, n, i);
		end

End of Function Max_Rev

===========================

Declare Function main

	Declare int n; // where 'n' is the total prices given.
	Let prices[n] be an int array given to the user.
	and r[n] be an array filled with zeros.

	Calling Function to get Max Revenue: Max_Rev(r, p, n);
	
main Function return 0 to show program executed ok

_________________________________________________________

Task_3:
-------

Shown:
 
ind	|	r[ind] on j	//we are starting with j = 1 in our algorithm
	|
	|	1	2	4	5	6		
----------------------------------------------------------
	|	_
1	|	1	_
2	|	1	5	_
3	|	1	5	8	__
4	|	1	5	8	10	__
5	|	1	5	8	10	13	__
6	|	1	5	8	10	13	17

so, max revenue for n = 6 is r[n]= {0 1 5 8 10 13 17}

_________________________________________________________

Task_4:
-------

Declare void Function rev_generator with parameters rev_generator(int* r, int* p, int* c, int n, int& ind)

	Check if (n == ind)
		begin
			return;
		end
	Declare int j = 1
	
	Do while loop with condition
		begin
			r[ind] = Max ( r[ind] , p[j] + r[ind - j] ) // returns max value from r[ind] and p[j] + r[ind - j]
			c[ind] = j
			increment j by one.
		end
	It runs till j <= ind is violated

	Calling Function Revenue Generator: rev_generator(r, p, c, n, ind++);

End of Function rev_generator

===========================

Declare void Function Max_Rev with parameters Max_Rev(int* r, int* p, int* c, int n)

	Check if (n == 0)
		begin
			return;
		end
	else check if (n == 1)
		begin
			c[1] = r[1] = p[1];
		end
	else check if (n > 1)
		begin
			declare int i = 1; 
			Calling Function Revenue Generator: rev_generator(r, p, c, n, i);
		end

End of Function Max_Rev

===========================

Declare Function main

	Declare int n; // where 'n' is the total prices given.
	Let prices[n] be an int array given to the user.
	and r[n] be an array filled with zeros.
	and c[n] be an array tell where should we cut the rod to get optimal revenue

	Calling Function to get Max Revenue: Max_Rev(r, p, c, n);
	
main Function return 0 to show program executed ok

_________________________________________________________
		Thank You ðŸ˜‰